#!/usr/bin/env python3
from collections import defaultdict
from operator import add, itemgetter
import numpy as np
import time

class Ant:
    def __init__(self):
        self.grid = defaultdict(bool)
        self.grid[(0, 0)] = False
        self.loc = (0, 0)
        self.dir = (1, 0) # Right

    def move(self):
        if self.grid[self.loc]:
            self.turn_left()
        else:
            self.turn_right()

        self.grid[self.loc] = not self.grid[self.loc]
        # Element-wise addition of tuples
        self.loc = tuple(map(add, self.loc, self.dir))
        self.grid[self.loc] = self.grid[self.loc]

    def turn_right(self):
        (x, y) = self.dir
        self.dir = (y, -x)

    def turn_left(self):
        (x, y) = self.dir
        self.dir = (-y, x)

    # Convert dict into 2D array
    def get_grid(self):
        min_x = min(self.grid.keys(), key=itemgetter(0))[0]
        min_y = min(self.grid.keys(), key=itemgetter(1))[1]
        max_x = max(self.grid.keys(), key=itemgetter(0))[0]
        max_y = max(self.grid.keys(), key=itemgetter(1))[1]

        matrix = np.zeros((max_x - min_x + 1, max_y - min_y + 1), dtype=bool)
        for i in range(len(matrix)):
            for j in range(len(matrix[0])):
                matrix[i, j] = self.grid[(i + min_x, j + min_y)]

        return matrix.transpose()

ant = Ant()
print(ant.get_grid())
times = 1000
for i in range(times):
    ant.move()
    print('After {} move(s):'.format(i+1))
    print(ant.get_grid())
    print()
    time.sleep(0.1)

